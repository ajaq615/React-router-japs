{"ast":null,"code":"var _jsxFileName = \"C:\\\\AJ\\\\React\\\\React-router-japs\\\\frontend\\\\src\\\\pages\\\\NewEvent.js\";\nimport { json } from 'react-router-dom';\nimport EventForm from '../components/EventForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewEventPage = () => {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n};\n_c = NewEventPage;\nexport default NewEventPage;\nexport async function action(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const data = request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!Response.ok) {\n    throw json({\n      message: 'Could not save event!',\n      status: 500\n    });\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["json","EventForm","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","_ref","request","params","data","formData","eventData","title","get","image","date","description","fetch","method","headers","body","JSON","stringify","Response","ok","message","status","$RefreshReg$"],"sources":["C:/AJ/React/React-router-japs/frontend/src/pages/NewEvent.js"],"sourcesContent":["import { json } from 'react-router-dom';\r\nimport EventForm from '../components/EventForm';\r\n\r\nconst NewEventPage = () => {\r\n  return <EventForm />;\r\n};\r\n\r\nexport default NewEventPage;\r\n\r\nexport async function action({ request, params }) {\r\n  const data = request.formData();\r\n\r\n  const eventData = {\r\n    title: data.get('title'),\r\n    image: data.get('image'),\r\n    date: data.get('date'),\r\n    description: data.get('description'),\r\n  };\r\n\r\n  fetch('http://localhost:8080/events', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(eventData),\r\n  });\r\n\r\n  if (!Response.ok) {\r\n    throw json({message: 'Could not save event!', status: 500})\r\n  }\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,oBAAOD,OAAA,CAACF,SAAS;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACtB,CAAC;AAACC,EAAA,GAFIL,YAAY;AAIlB,eAAeA,YAAY;AAE3B,OAAO,eAAeM,MAAMA,CAAAC,IAAA,EAAsB;EAAA,IAArB;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAC9C,MAAMG,IAAI,GAAGF,OAAO,CAACG,QAAQ,EAAE;EAE/B,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACrC,CAAC;EAEDI,KAAK,CAAC,8BAA8B,EAAE;IACpCC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,SAAS;EAChC,CAAC,CAAC;EAEF,IAAI,CAACY,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAM7B,IAAI,CAAC;MAAC8B,OAAO,EAAE,uBAAuB;MAAEC,MAAM,EAAE;IAAG,CAAC,CAAC;EAC7D;AAEF;AAAC,IAAAtB,EAAA;AAAAuB,YAAA,CAAAvB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}